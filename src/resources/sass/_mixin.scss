/**
 * common mixin (サイト内でどこでも使う可能性がある)
 */

// breakpoint
@mixin mq($breakpoint: md) {
  @media #{map-get($breakpoints, $breakpoint)} {
    @content;
  }
}

// hover
@mixin hover {
  &:hover {
    @include mq(md) {
      @content;
    }
  }
}

// flex
@mixin flex($flow: row nowrap, $justify-content: flex-start, $align-items: stretch) {
  display: flex;
  flex-flow: $flow;
  justify-content: $justify-content;
  align-items: $align-items;
}

// フォント種類：bangers
@mixin bangers($size: font(16), $letterSpacing: 1px, $weight: bold) {
  font-family: 'Bangers', cursive;
  font-size: $size;
  letter-spacing: $letterSpacing;
  font-weight: $weight;
}

@mixin fonts($size: font(16), $weight: bold, $height, $spacing) {
  font-size: $size;
  font-weight: $weight;

  @if $height {
    line-height: $height;
  }

  @if $spacing {
    letter-spacing: $spacing;
  }
}

// h3 text decoration (- text)
@mixin middle-line-text($width, $height, $color) {
  position: relative;
  padding-left: interval($width + 1);
  color: $color;

  &::before {
    display: block;
    content: '';
    width: interval($width);
    height: $height;
    background-color: $color;
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
  }
}

// image trimming (imgタグの一つ親のタグに指定する)
@mixin trimming($aspect) {
  position: relative;

  &::before {
    content: '';
    display: block;
    padding-bottom: $aspect;
  }

  & > img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}

// 背景指定（background-image）
@mixin background-image($url, $position: center center, $size: cover) {
  background-image: url($url);
  background-repeat: no-repeat;
  background-position: $position;
  background-size: $size;
}

/**
 * gradation
 */

@mixin gradient($start-color: #091e2f, $end-color: #030A10, $orientation: default){
  background: $start-color;
  // 垂直グラデーションの場合
  @if $orientation == vertical{
    background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
  }
  // 水平グラデーションの場合
  @else if $orientation == horizontal{
    background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
  }
  // 斜め
  @else if $orientation == diagonal{
    background: -moz-linear-gradient(45deg,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(linear, right top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-linear-gradient(45deg,  $start-color 0%,$end-color 100%);
    background: -o-linear-gradient(45deg,  $start-color 0%,$end-color 100%);
    background: linear-gradient(to top right,  $start-color 0%,$end-color 100%);
  }
  @else{
    background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
    background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
    background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
    background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
  }
}

// border gradient
@mixin border-gradient($w: 100%, $start-color, $end-color, $position: default) {
  position: relative;

  &::after {
    content: '';
    display: block;
    width: $w;
    height: 2px;
    @include gradient($start-color, $end-color, horizontal);
    position: absolute;

    @if $position == top {
      top: 0;
    }

    @else if $position == bottom {
      bottom: 0;
    }

    @else {
      top: 50%;
      right: 0;
      transform: translateY(-50%);
    }
  }
}

/**
 * element
 */

// modal close button
@mixin close-button($size: interval(4), $color: color(white)) {
  position: relative;
  width: $size;
  height: $size;
  border-radius: radius(circle);
  @include flex(row nowrap, center, center);
  transition: background-color .3s ease-out;

  & > svg {
    fill: $color;
    width: 60%;
    height: 60%;
    transition: fill .3s ease-out;
  }

  @include mq(md) {
    // ボタンの色がネイビーの時
    @if $color == color(darkblue) {
      &:hover {
        background-color: color(darkblue);
      }

      &:hover > svg {
        fill: color(white);
      }
    }
    // 基本のホバースタイル
    @else {
      &:hover {
        background-color: color(orange);
      }
    }
  }
}

/**
 * 装飾用 mixin
 */

// tennis ball
@mixin ball($size: 160px, $content: 'CHUO\AUNIVERSITY', $fontSize: 10) {
  width: $size;
  height: $size;
  background-color: color(white);
  box-shadow: inset -1rem -1rem 3rem color(darkShadow);
  border-radius: radius(circle);
  position: relative;

  &::before {
    display: block;
    content: '';
    position: absolute;
    top: calc(#{$size} / 4);
    left: 50%;
    transform: translateX(-50%);
    width: calc(#{$size} / 25);
    height: calc(#{$size} / 25);
    background-color: darken($color: blue, $amount: 10%);
    border-radius: radius(circle);
  }

  &::after {
    display: block;
    content: $content;
    white-space: pre;
    color: darken($color: red, $amount: .4);
    font-weight: bold;
    font-size: font($fontSize);
    text-align: center;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

/**
 * page
 */

// scroll button common style
@mixin scroll-top ($position: interval(2),$size: interval(6) ) {
  position: fixed;
  z-index: 10;
  bottom: $position;
  right: $position;
  width: $size;
  height: $size;
}

/**
 * component
 */

// table cell width (セル幅が可変する)
@mixin rating($ratio) {
  .common-table {
    &__key {
      width: calc(#{$ratio} * 10%);
    }

    &__value {
      width: calc(100% - (#{$ratio} * 10%));
    }
  }
}

// ticket thumbnail border
@mixin thumbnail-border($c: white, $color: color(blue), $direction: diagonal) {
  border-radius: radius(circle);
  background-color: color($c);
  position: relative;
  @include flex(row nowrap, center, center);

  &::before {
    content: '';
    display: block;
    width: 108%;
    height: 108%;
    border-radius: radius(circle);
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    @include gradient(color(darkblue), $color, $direction);
  }
}

// panel item
@mixin panel-item($color) {
  background: $color;

  @include mq(md) {
    background: transparent;
    border: 1px solid rgba(color(lightgray), $alpha: .1);
  }

  @include hover {
    background: $color;
    border: none;
  }
}

/**
 * swiper
 */

// next/prev button
@mixin swiper-button($color: color(lightgray), $size: interval(6)) {
  &-button-next,
  &-button-prev {
    width: $size;
    height: $size;
    border: 1px solid $color;
    border-radius: radius(circle);
    outline: none;
    transform: translateY(- interval(2));

    &::after {
      content: '';
    }
  }

  &-button-next {
    right: interval(.5);

    @if $color == color(lightDarkblue) {
      @include background-image('data:image/svg+xml;utf8,#{$arrow-right-darkblue}', center center, calc(#{$size} / 2));
    }
    @else if $color == color(lightgray) {
      @include background-image('data:image/svg+xml;utf8,#{$arrow-right}', center center, calc(#{$size} / 2));
    }
  }

  &-button-prev {
    left: interval(.5);

    @if $color == color(lightDarkblue) {
      @include background-image('data:image/svg+xml;utf8,#{$arrow-left-darkblue}', center center, calc(#{$size} / 2));
    }
    @else if $color == color(lightgray) {
      @include background-image('data:image/svg+xml;utf8,#{$arrow-left}', center center, calc(#{$size} / 2));
    }
  }
}

// pagination
@mixin swiper-pagination($color: color(lightDarkblue), $size: interval(5)) {
  &-container {
    padding-bottom: interval(3);
  }

  &-pagination-bullets {
    bottom: 0;

    // ページネーションの丸は、スロットで読まれるためディープセレクタにする
    &::v-deep .swiper-pagination-bullet {
      opacity: 1;
      position: relative;
      width: $size;
      height: 3px;
      border-radius: 0;
      margin: 0 interval(.5);
      transition: background-color .3s ease;
      background-color: rgba($color, .2);
      outline: none;
    }

    &::v-deep .swiper-pagination-bullet-active {
      background-color: $color;
    }
  }
}
